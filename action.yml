name: 'Apply latest configuration profiles via Fleet'
description: 'Applies the latest MDM configuration profiles to a Fleet team'

inputs:
  FLEET_API_TOKEN:
    description: 'Fleet API Token'
    required: true
  FLEET_URL:
    description: 'Fleet URL'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.MDM_CONFIG_REPO }}

    - name: Install fleetctl
      run: npm install -g fleetctl
      shell: bash

    - name: Configure fleetctl
      run: fleetctl config set --address ${{ inputs.FLEET_URL }} --token ${{ inputs.FLEET_API_TOKEN }}
      shell: bash

    - name: Run fleetctl apply
      run: |
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # STEP 1: Apply .controls.yml files:
        # (Note that .controls.yml must be applied BEFORE .settings.yml to avoid resetting certain config to the defaults)
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # Apply no-team.controls.yml
        # TODO

        # Loop through folders in /teams and apply <folder-name>.controls.yml for each
        # TODO 

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # STEP 2: Apply .settings.yml files:
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # Apply default.settings.yml
        # TODO 

        # Loop through folders in /teams and apply <folder-name>.settings.yml for each
        # TODO

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # STEP 3: Map team names to their IDs
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # Print a YAML document of all teams & their IDs with `fleetctl get teams --yaml`
        # This will be used to get team IDs based on the team names in the team query & policy config files.
        # TODO

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # STEP 4: Apply queries
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # Print a YAML document of existing top-level queries with `fleetctl get queries --yaml`
        # TODO

        # Compare contents of printed queries YAML with contents of default.queries.yaml
        # TODO 

        # For each query that exists in Fleet that is **not present** in default.queries.yaml, make a cURL request to delete the query
        # TODO 

        # Apply default.queries.yaml
        # TODO


        # Loop through folders in /teams
        # For each team:

        # • Get a reference to the team ID from the team YAML we printed previously, based on the `team` key of the first item in <folder-name>.queries.yml
        # TODO

        # • Print a YAML document of existing queries with `fleetctl get queries --team=<team_id> --yaml` 
        # TODO

        # • Compare contents of printed team queries YAML with contents of <folder-name>.queries.yaml
        # TODO

        # • For each team query that exists in Fleet that is **not present** in <folder-name>.queries.yaml, make a cURL request to delete the query
        # TODO

        # • Apply <team-name>.queries.yaml
        # TODO


        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # STEP 5: Apply policies
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # Make a cURL request to the "List policies" endpoint: GET /api/v1/fleet/global/policies
        # (Note that there is no `fleetctl get policies` command, so we need to make an API request here)

        # Compare policies in API response with contents of default.policies.yaml
        # TODO 

        # For each policy that exists in Fleet that is **not present** in default.policies.yaml, build a list of policy IDs to delete and make a cURL request to delete those policies
        # TODO 

        # Apply default.policies.yaml
        # TODO


        # Loop through folders in /teams
        # For each team:

        # • Get a reference to the team ID from the team YAML we printed previously, based on the `team` key of the first item in <folder-name>.policies.yml
        # TODO

        # • # Make a cURL request to the "List team policies" endpoint: GET /api/v1/fleet/teams/{id}/policies
        # TODO

        # • Compare policies in API response with contents of <folder-name>.policies.yaml
        # TODO

        # • For each team policy that exists in Fleet that is **not present** in <folder-name>.policies.yaml, build a list of policy IDs to delete and make a cURL request to delete those policies
        # TODO

        # • Apply <team-name>.policies.yaml
        # TODO

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        # All done!
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      shell: bash
